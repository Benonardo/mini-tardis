plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url 'https://maven.enjarai.dev/releases' }
	maven { url 'https://maven.enjarai.nl/mirrors' }

	// Polymer and other server-side utils
	maven { url 'https://maven.nucleoid.xyz' }

	// Permissions API
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

	// CCA
	maven { url 'https://maven.ladysnake.org/releases' }

	maven { url 'https://jitpack.io' }
}

loom {
    runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=mini_tardis"
 
			runDir "build/datagen"
		}
	}
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-level:${project.cca_version}")
	include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}")

	modImplementation include("eu.pb4:polymer-core:${property('deps.polymer')}")
	modImplementation include("eu.pb4:polymer-virtual-entity:${property('deps.polymer')}")
	modImplementation include("eu.pb4:polymer-resource-pack:${property('deps.polymer')}")
	modRuntimeOnly("eu.pb4:polymer-autohost:${property('deps.polymer')}")
	include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${property('deps.mixin_extras')}")))
	modImplementation include("xyz.nucleoid:server-translations-api:${property('deps.server_translations_api')}")
	include(modImplementation("me.lucko:fabric-permissions-api:${property('deps.permissions_api')}"))
	modImplementation include("xyz.nucleoid:fantasy:${property('deps.fantasy')}")
	modImplementation include("eu.pb4:map-canvas-api:${property('deps.map_api')}")

	implementation include("com.github.Benonardo:vanilla-mocha-doom:-SNAPSHOT")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}